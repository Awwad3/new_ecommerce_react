generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id            Int       @id @default(autoincrement())
  user_id       Int
  full_name     String?   @db.VarChar(100)
  phone_number  String?   @db.VarChar(20)
  address_line1 String    @db.VarChar(255)
  address_line2 String?   @db.VarChar(255)
  city          String?   @db.VarChar(100)
  state         String?   @db.VarChar(100)
  postal_code   String?   @db.VarChar(20)
  country       String?   @db.VarChar(100)
  is_default    Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model categories {
  id          Int        @id @default(autoincrement())
  vendor_id   Int
  name        String     @db.VarChar(100)
  description String?
  image_path  String?    @db.VarChar(255)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  vendors     vendors    @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  products    products[]
}

model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int
  message    String
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  orders     orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id                  Int                   @id @default(autoincrement())
  customer_id         Int
  status              String?               @default("pending") @db.VarChar(50)
  total_amount        Decimal               @db.Decimal(10, 2)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  order_items         order_items[]
  users               users                 @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payments            payments[]
  shipping_operations shipping_operations[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id             Int       @id @default(autoincrement())
  order_id       Int
  amount         Decimal   @db.Decimal(10, 2)
  payment_method String?   @db.VarChar(50)
  payment_status String?   @default("unpaid") @db.VarChar(50)
  transaction_id String?   @db.VarChar(100)
  paid_at        DateTime? @db.Timestamp(6)
  orders         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model products {
  id          Int           @id @default(autoincrement())
  vendor_id   Int
  category_id Int
  name        String        @db.VarChar(100)
  description String?
  price       Decimal       @db.Decimal(10, 2)
  stock       Int           @default(0)
  image_path  String?       @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  order_items order_items[]
  categories  categories    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  vendors     vendors       @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  reviews     reviews[]
  wishlists   wishlists[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  rating     Int?
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(50)
  users users[]
}

model shipping_companies {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  contact_info        String?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  shipping_operations shipping_operations[]
}

model shipping_operations {
  id                  Int                @id @default(autoincrement())
  shipping_company_id Int
  order_id            Int
  shipping_type_id    Int
  status              String?            @default("processing") @db.VarChar(50)
  tracking_number     String?            @db.VarChar(100)
  shipped_at          DateTime?          @db.Timestamp(6)
  delivered_at        DateTime?          @db.Timestamp(6)
  created_at          DateTime?          @default(now()) @db.Timestamp(6)
  orders              orders             @relation(fields: [order_id], references: [id], onDelete: Cascade)
  shipping_companies  shipping_companies @relation(fields: [shipping_company_id], references: [id])
  shipping_types      shipping_types     @relation(fields: [shipping_type_id], references: [id])
}

model shipping_types {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(50)
  shipping_operations shipping_operations[]
}

model users {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar(255)
  role_id       Int
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  addresses     addresses[]
  notifications notifications[]
  orders        orders[]
  reviews       reviews[]
  roles         roles           @relation(fields: [role_id], references: [id])
  vendors       vendors[]
  wishlists     wishlists[]
}

model vendors {
  id                Int          @id @default(autoincrement())
  user_id           Int
  store_name        String       @db.VarChar(100)
  store_description String?
  store_image_path  String?      @db.VarChar(255)
  created_at        DateTime?    @default(now()) @db.Timestamp(6)
  categories        categories[]
  products          products[]
  users             users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model wishlists {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
}
